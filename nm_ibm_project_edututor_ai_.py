# -*- coding: utf-8 -*-
"""NM IBM project  - Edututor AI .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179CRza9RtqEVEmxnoIgdSZxOAKhsuJb2
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import re

# -------------------- Model Setup --------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

def concept_explanation(concept, difficulty):
    level_descriptors = {
        "Beginner": "simple, easy-to-understand language suitable for a complete beginner",
        "Intermediate": "detailed explanation with some technical terms for someone with basic knowledge",
        "Advanced": "comprehensive, technical explanation with depth for an expert audience"
    }
    prompt = f"Explain the concept of {concept} in {level_descriptors[difficulty]}. Include examples:"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept, difficulty):
    level_descriptors = {
        "Beginner": "basic",
        "Intermediate": "moderately challenging",
        "Advanced": "challenging and detailed"
    }
    prompt = f"Generate 5 {level_descriptors[difficulty]} quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
    return generate_response(prompt, max_length=1000)

def study_plan_generator(concept, timeframe, hours_per_week):
    prompt = f"Create a {timeframe} study plan for learning {concept} with approximately {hours_per_week} hours per week. Include topics to cover each week, recommended resources, and milestones:"
    return generate_response(prompt, max_length=1000)

def extract_flashcards(text):
    # Try to extract key points for flashcards
    prompt = f"Extract key concepts and definitions from this text to create study flashcards. Format each flashcard with a clear question on the front and answer on the back:\n\n{text}\n\nFlashcards:"
    return generate_response(prompt, max_length=800)

# -------------------- Custom CSS --------------------
# Enhanced CSS with gold glitter effect
custom_css = """
:root {
    --primary: #2E8B57;  /* Forest Green */
    --secondary: #8FBC8F; /* Dark Sea Green */
    --accent: #DAA520;    /* Goldenrod */
    --dark: #1A3C2F;     /* Deep Forest Green */
    --darker: #0F291F;   /* Darker Forest Green */
    --light: #F5F5DC;    /* Beige light color */
}

body {
    font-family: 'Segoe UI', 'Poppins', sans-serif;
    background: linear-gradient(135deg, var(--darker) 0%, var(--dark) 100%);
    min-height: 100vh;
    margin: 0;
    color: var(--light);
    overflow-x: hidden;
}

/* Enhanced glitter effect */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: -1;
    background-image:
        radial-gradient(circle at 20% 30%, rgba(218, 165, 32, 0.4) 0px, transparent 2px),
        radial-gradient(circle at 40% 70%, rgba(218, 165, 32, 0.3) 1px, transparent 3px),
        radial-gradient(circle at 60% 20%, rgba(218, 165, 32, 0.5) 1px, transparent 2px),
        radial-gradient(circle at 80% 50%, rgba(218, 165, 32, 0.4) 0px, transparent 3px);
    background-size: 400px 600px, 500px 500px, 450px 450px, 600px 400px;
    animation: glitter 10s linear infinite;
}

@keyframes glitter {
    0% {
        background-position: 0 0, 0 0, 0 0, 0 0;
    }
    100% {
        background-position: 400px 600px, 500px 500px, 450px 450px, 600px 400px;
    }
}

/* Additional floating glitter particles */
.glitter-particle {
    position: fixed;
    background-color: rgba(218, 165, 32, 0.7);
    border-radius: 50%;
    pointer-events: none;
    z-index: -1;
    animation: float linear infinite;
}

@keyframes float {
    to {
        transform: translateY(-100vh);
    }
}

/* Container */
.gradio-container {
    max-width: 1200px !important;
    background: rgba(26, 60, 47, 0.9) !important;
    border-radius: 20px !important;
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4) !important;
    margin: 2rem auto !important;
    padding: 2rem !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
}

/* Header */
.header {
    text-align: center;
    margin-bottom: 2rem;
    padding: 2rem;
    border-radius: 16px;
    color: white;
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    box-shadow: 0 6px 20px rgba(46, 139, 87, 0.3);
    border: 1px solid rgba(218, 165, 32, 0.3);
}

.header h1 {
    margin: 0;
    font-size: 2.8rem;
    font-weight: 800;
    color: #DAA520; /* Gold color */
    text-shadow: 0 0 10px rgba(218, 165, 32, 0.5);
}

.header p {
    margin: 0.5rem 0 0;
    font-size: 1.2rem;
    opacity: 0.9;
}

/* Tabs */
.tab-nav button {
    background: rgba(218, 165, 32, 0.1) !important;
    border-radius: 14px !important;
    padding: 16px 32px !important;
    font-weight: 600 !important;
    color: var(--light) !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    transition: all 0.3s ease !important;
}
.tab-nav button:hover {
    background: rgba(218, 165, 32, 0.2) !important;
    transform: translateY(-3px);
}
.tab-nav button.selected {
    background: linear-gradient(135deg, var(--accent) 0%, #B8860B 100%) !important;
    color: white !important;
    box-shadow: 0 6px 16px rgba(218, 165, 32, 0.4) !important;
}

/* Panels */
.input-panel, .output-panel {
    backdrop-filter: blur(12px) saturate(150%);
    background: rgba(26, 60, 47, 0.5) !important;
    border-radius: 20px !important;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.35);
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.input-panel:hover, .output-panel:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 32px rgba(46, 139, 87, 0.4);
}

/* Buttons */
button.primary {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%) !important;
    color: white !important;
    border: none !important;
    border-radius: 14px !important;
    padding: 14px 28px !important;
    font-weight: 600 !important;
    font-size: 1.05rem;
    transition: all 0.3s ease !important;
    box-shadow: 0 6px 16px rgba(46, 139, 87, 0.3) !important;
}
button.primary:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 0 20px rgba(46, 139, 87, 0.8);
}
button.secondary {
    background: rgba(218, 165, 32, 0.1) !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    border-radius: 14px !important;
    padding: 14px 28px !important;
    font-weight: 600 !important;
    color: var(--light) !important;
}
button.secondary:hover {
    transform: translateY(-2px) scale(1.03);
    box-shadow: 0 0 14px rgba(218, 165, 32, 0.2);
}

/* Example buttons */
.example-btn {
    margin: 6px !important;
    padding: 10px 20px !important;
    background: rgba(143, 188, 143, 0.2) !important;
    border-radius: 12px !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    color: var(--light) !important;
}
.example-btn:hover {
    background: rgba(143, 188, 143, 0.3) !important;
    transform: translateY(-2px);
}

/* Loader */
.loading-dots {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 1rem auto;
}
.dot {
    width: 12px;
    height: 12px;
    margin: 0 6px;
    background: var(--accent);
    border-radius: 50%;
    animation: bounce 1.5s infinite;
}
.dot:nth-child(2) { animation-delay: 0.3s; }
.dot:nth-child(3) { animation-delay: 0.6s; }
@keyframes bounce {
    0%, 80%, 100% { transform: scale(0.8); opacity: 0.6; }
    40% { transform: scale(1.2); opacity: 1; }
}

/* Footer */
.footer {
    text-align: center;
    margin-top: 2rem;
    padding: 1rem;
    color: var(--light);
    opacity: 0.7;
    font-size: 0.95rem;
    border-top: 1px solid rgba(218, 165, 32, 0.2);
}

/* Flashcard styling */
.flashcard {
    background: linear-gradient(135deg, #2E8B57 0%, #3CB371 100%);
    border-radius: 12px;
    padding: 16px;
    margin: 10px 0;
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(218, 165, 32, 0.3);
}
.flashcard-front {
    font-weight: bold;
    border-bottom: 1px dashed rgba(255, 255, 255, 0.3);
    padding-bottom: 10px;
    margin-bottom: 10px;
    color: #DAA520;
}
.flashcard-back {
    font-style: italic;
}

/* Text areas */
textarea, input[type="text"] {
    background: rgba(26, 60, 47, 0.3) !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    color: var(--light) !important;
    border-radius: 12px !important;
}

/* Dropdowns */
select {
    background: rgba(26, 60, 47, 0.3) !important;
    border: 1px solid rgba(218, 165, 32, 0.2) !important;
    color: var(--light) !important;
    border-radius: 12px !important;
}

/* Sliders */
input[type="range"] {
    color: var(--accent) !important;
}
"""

# -------------------- Gradio UI --------------------
with gr.Blocks(css=custom_css, theme=gr.themes.Default(primary_hue="green", secondary_hue="yellow")) as app:
    with gr.Column():
        # Header
        with gr.Row(elem_classes="header"):
            gr.Markdown("""
            # 🚀 EduTutor AI Assistant
            ### Your personal learning companion
            """)

        # Tabs
        with gr.Tabs(elem_classes="tab-nav"):
            # Concept Explanation
            with gr.TabItem("📚 Concept Explanation"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="input-panel"):
                        gr.Markdown("""<div class="icon-label">📝 <b>Concept/Topic</b></div>""")
                        concept_input = gr.Textbox(label="", placeholder="e.g., machine learning, photosynthesis", show_label=False)

                        gr.Markdown("""<div class="icon-label">🎯 <b>Difficulty Level</b></div>""")
                        difficulty = gr.Dropdown(
                            choices=["Beginner", "Intermediate", "Advanced"],
                            value="Intermediate",
                            label="",
                            show_label=False
                        )

                        with gr.Row():
                            explain_btn = gr.Button("💡 Explain Concept", variant="primary", elem_classes="primary")
                            clear_btn = gr.Button("🗑️ Clear", variant="secondary", elem_classes="secondary")

                        gr.Markdown("""<div class="icon-label">🚀 <b>Try examples:</b></div>""")
                        with gr.Row():
                            ex_btn1 = gr.Button("🤖 AI", elem_classes="example-btn")
                            ex_btn2 = gr.Button("🌿 Photosynthesis", elem_classes="example-btn")
                            ex_btn3 = gr.Button("⚛️ Quantum Physics", elem_classes="example-btn")

                    with gr.Column(scale=2, elem_classes="output-panel"):
                        gr.Markdown("""<div class="icon-label">📖 <b>Detailed Explanation</b></div>""")
                        loader1 = gr.HTML("<div class='loading-dots'><div class='dot'></div><div class='dot'></div><div class='dot'></div></div>")
                        explanation_output = gr.Textbox(label="", lines=14, show_copy_button=True, show_label=False)
                        with gr.Row():
                            flashcard_btn = gr.Button("📇 Create Flashcards", variant="primary", elem_classes="primary")

            # Quiz Generator
            with gr.TabItem("🧠 Quiz Generator"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="input-panel"):
                        gr.Markdown("""<div class="icon-label">📝 <b>Quiz Topic</b></div>""")
                        quiz_input = gr.Textbox(label="", placeholder="e.g., physics, world history", show_label=False)

                        gr.Markdown("""<div class="icon-label">🎯 <b>Difficulty Level</b></div>""")
                        quiz_difficulty = gr.Dropdown(
                            choices=["Beginner", "Intermediate", "Advanced"],
                            value="Intermediate",
                            label="",
                            show_label=False
                        )

                        with gr.Row():
                            quiz_btn = gr.Button("❓ Generate Quiz", variant="primary", elem_classes="primary")
                            clear_quiz_btn = gr.Button("🗑️ Clear", variant="secondary", elem_classes="secondary")

                        gr.Markdown("""<div class="icon-label">🚀 <b>Try examples:</b></div>""")
                        with gr.Row():
                            q_ex_btn1 = gr.Button("🎨 Renaissance Art", elem_classes="example-btn")
                            q_ex_btn2 = gr.Button("🔬 Cell Biology", elem_classes="example-btn")
                            q_ex_btn3 = gr.Button("🐍 Python Basics", elem_classes="example-btn")

                    with gr.Column(scale=2, elem_classes="output-panel"):
                        gr.Markdown("""<div class="icon-label">📝 <b>Quiz Questions</b></div>""")
                        loader2 = gr.HTML("<div class='loading-dots'><div class='dot'></div><div class='dot'></div><div class='dot'></div></div>")
                        quiz_output = gr.Textbox(label="", lines=16, show_copy_button=True, show_label=False)

            # Study Plan Generator
            with gr.TabItem("📅 Study Plan Generator"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="input-panel"):
                        gr.Markdown("""<div class="icon-label">📚 <b>Topic to Learn</b></div>""")
                        study_topic = gr.Textbox(label="", placeholder="e.g., calculus, French language", show_label=False)

                        gr.Markdown("""<div class="icon-label">⏰ <b>Study Timeframe</b></div>""")
                        timeframe = gr.Dropdown(
                            choices=["1 week", "2 weeks", "1 month", "2 months", "3 months", "6 months"],
                            value="1 month",
                            label="",
                            show_label=False
                        )

                        gr.Markdown("""<div class="icon-label">⏱️ <b>Hours per Week</b></div>""")
                        hours_per_week = gr.Slider(1, 20, value=5, step=1, label="", show_label=False)

                        with gr.Row():
                            study_plan_btn = gr.Button("📋 Generate Study Plan", variant="primary", elem_classes="primary")
                            clear_study_btn = gr.Button("🗑️ Clear", variant="secondary", elem_classes="secondary")

                        gr.Markdown("""<div class="icon-label">🚀 <b>Try examples:</b></div>""")
                        with gr.Row():
                            s_ex_btn1 = gr.Button("🤖 Machine Learning", elem_classes="example-btn")
                            s_ex_btn2 = gr.Button("🌍 World History", elem_classes="example-btn")
                            s_ex_btn3 = gr.Button("🧪 Organic Chemistry", elem_classes="example-btn")

                    with gr.Column(scale=2, elem_classes="output-panel"):
                        gr.Markdown("""<div class="icon-label">📊 <b>Study Plan</b></div>""")
                        loader3 = gr.HTML("<div class='loading-dots'><div class='dot'></div><div class='dot'></div><div class='dot'></div></div>")
                        study_output = gr.Textbox(label="", lines=16, show_copy_button=True, show_label=False)

            # Flashcard Generator
            with gr.TabItem("📇 Flashcard Generator"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="input-panel"):
                        gr.Markdown("""<div class="icon-label">📝 <b>Topic for Flashcards</b></div>""")
                        flashcard_input = gr.Textbox(label="", placeholder="e.g., biology terms, programming concepts", show_label=False)

                        with gr.Row():
                            flashcard_gen_btn = gr.Button("🃏 Generate Flashcards", variant="primary", elem_classes="primary")
                            clear_flashcard_btn = gr.Button("🗑️ Clear", variant="secondary", elem_classes="secondary")

                        gr.Markdown("""<div class="icon-label">🚀 <b>Try examples:</b></div>""")
                        with gr.Row():
                            f_ex_btn1 = gr.Button("🧠 Psychology Terms", elem_classes="example-btn")
                            f_ex_btn2 = gr.Button("⚛️ Physics Formulas", elem_classes="example-btn")
                            f_ex_btn3 = gr.Button("📖 Literary Devices", elem_classes="example-btn")

                    with gr.Column(scale=2, elem_classes="output-panel"):
                        gr.Markdown("""<div class="icon-label">📇 <b>Generated Flashcards</b></div>""")
                        loader4 = gr.HTML("<div class='loading-dots'><div class='dot'></div><div class='dot'></div><div class='dot'></div></div>")
                        flashcard_output = gr.HTML(label="")

        # Footer
        gr.Markdown("<div class='footer'>EduTutor AI Assistant • Powered by IBM Granite-3.2-2B</div>")

    # -------------------- Event Handlers --------------------
    explain_btn.click(concept_explanation, inputs=[concept_input, difficulty], outputs=explanation_output)
    quiz_btn.click(quiz_generator, inputs=[quiz_input, quiz_difficulty], outputs=quiz_output)
    study_plan_btn.click(study_plan_generator, inputs=[study_topic, timeframe, hours_per_week], outputs=study_output)
    flashcard_gen_btn.click(extract_flashcards, inputs=flashcard_input, outputs=flashcard_output)
    flashcard_btn.click(extract_flashcards, inputs=explanation_output, outputs=flashcard_output)

    # Clear buttons
    clear_btn.click(lambda: ["", ""], inputs=None, outputs=[concept_input, explanation_output])
    clear_quiz_btn.click(lambda: ["", ""], inputs=None, outputs=[quiz_input, quiz_output])
    clear_study_btn.click(lambda: ["", "", 5, ""], inputs=None, outputs=[study_topic, timeframe, hours_per_week, study_output])
    clear_flashcard_btn.click(lambda: ["", ""], inputs=None, outputs=[flashcard_input, flashcard_output])

    # Example buttons for concept explanation
    for btn, text in [(ex_btn1,"Artificial Intelligence"), (ex_btn2,"Photosynthesis"), (ex_btn3,"Quantum Physics")]:
        btn.click(lambda t=text: t, outputs=concept_input).then(
            concept_explanation, inputs=[concept_input, difficulty], outputs=explanation_output)

    # Example buttons for quiz generator
    for btn, text in [(q_ex_btn1,"Renaissance Art"), (q_ex_btn2,"Cell Biology"), (q_ex_btn3,"Python Basics")]:
        btn.click(lambda t=text: t, outputs=quiz_input).then(
            quiz_generator, inputs=[quiz_input, quiz_difficulty], outputs=quiz_output)

    # Example buttons for study plan generator
    for btn, text in [(s_ex_btn1,"Machine Learning"), (s_ex_btn2,"World History"), (s_ex_btn3,"Organic Chemistry")]:
        btn.click(lambda t=text: t, outputs=study_topic).then(
            study_plan_generator, inputs=[study_topic, timeframe, hours_per_week], outputs=study_output)

    # Example buttons for flashcard generator
    for btn, text in [(f_ex_btn1,"Psychology Terms"), (f_ex_btn2,"Physics Formulas"), (f_ex_btn3,"Literary Devices")]:
        btn.click(lambda t=text: t, outputs=flashcard_input).then(
            extract_flashcards, inputs=flashcard_input, outputs=flashcard_output)

if __name__ == "__main__":
    app.launch(share=True)